# Generated by Django 2.2 on 2019-06-06 09:02

import articles.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import tagging_autocomplete_new.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('tagging', '0003_adapt_max_tag_length'),
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='AdvUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('vk_url', models.URLField(blank=True, default='', verbose_name='ВКонтакте')),
                ('fb_url', models.URLField(blank=True, default='', verbose_name='Facebook')),
                ('tw_url', models.URLField(blank=True, default='', verbose_name='Twitter')),
                ('ok_url', models.URLField(blank=True, default='', verbose_name='Одноклассники')),
                ('account_image', models.ImageField(blank=True, help_text='Лучше всего подобрать картинку с соотношением сторон 4:3.', null=True, upload_to=articles.models.get_image_path, verbose_name='Изображение профиля')),
                ('account_image_url', models.URLField(blank=True, default='', help_text='Вы можете либо загрузить картинку, либо вставить ссылку на нее.', verbose_name='Ссылка на изображение профиля')),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2, null=True, verbose_name='Страна')),
                ('city', models.CharField(blank=True, max_length=50, null=True, verbose_name='Город')),
                ('bdate', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('rating', models.IntegerField(default=0, verbose_name='Рейтинг')),
                ('is_activated', models.BooleanField(db_index=True, default=True, help_text='Пользователю было отправлено письмо на почту с ссылкой для активации аккаунта.', verbose_name='Активирован?')),
                ('send_messages', models.BooleanField(default=True, verbose_name='Присылать сообщения о новых комментариях?')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, default=None, max_length=20, unique=True, verbose_name='Название')),
                ('order', models.SmallIntegerField(db_index=True, default=0, verbose_name='Порядок')),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
                'ordering': ('order', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Gender',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, default=None, max_length=20, unique=True, verbose_name='Название')),
                ('one_letter_name', models.CharField(default=None, help_text='Используется в коде.', max_length=1, unique=True, verbose_name='Название пола в одну букву')),
            ],
            options={
                'verbose_name': 'Гендер',
                'verbose_name_plural': 'Гендеры',
            },
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Введите до 100 символов.', max_length=100, verbose_name='Название статьи')),
                ('content', models.TextField(verbose_name='Содержание')),
                ('image', models.ImageField(blank=True, help_text='Изображение на плитке на главной странице.\n                              Это поле проверяется первым.\n                              Если файл отсутствует - получает картинку по ссылке (ниже).', null=True, upload_to=articles.models.get_image_path, verbose_name='Превью')),
                ('image_url', models.TextField(blank=True, help_text='Изображение на плитке на главной странице.', null=True, verbose_name='Ссылка на изображение')),
                ('card_text', models.TextField(blank=True, help_text='Введите до 200 символов.', max_length=200, null=True, verbose_name='Аннотация')),
                ('tags', tagging_autocomplete_new.models.TagAutocompleteField(blank=True, max_length=255)),
                ('total_rating', models.IntegerField(default=0, help_text='Всего баллов, полученных от пользователей', verbose_name='Всего баллов')),
                ('rating', models.FloatField(default=0, help_text='Текущий рейтинг в 5-ти балльной шкале', max_length=1, verbose_name='Текущий рейтинг')),
                ('views', models.IntegerField(default=0, verbose_name='Просмотры')),
                ('is_active', models.BooleanField(default=False, verbose_name='Прошла ли модерацию?')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Опубликовано')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('category', models.ForeignKey(default=None, on_delete=django.db.models.deletion.PROTECT, to='articles.Category', verbose_name='Категория')),
                ('rated_users', models.ManyToManyField(blank=True, related_name='rated_users', to=settings.AUTH_USER_MODEL, verbose_name='Проголосовавшие пользователи')),
                ('viewed_users', models.ManyToManyField(blank=True, related_name='viewed_users', to=settings.AUTH_USER_MODEL, verbose_name='Пользователи, читавшие статью')),
            ],
            options={
                'verbose_name': 'Статья',
                'verbose_name_plural': 'Статьи',
            },
        ),
        migrations.AddField(
            model_name='advuser',
            name='cat_subscriptions',
            field=models.ManyToManyField(blank=True, related_name='cat_subscriptions', to='articles.Category', verbose_name='Подписки на категории'),
        ),
        migrations.AddField(
            model_name='advuser',
            name='gender',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.PROTECT, to='articles.Gender', verbose_name='Пол'),
        ),
        migrations.AddField(
            model_name='advuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='advuser',
            name='tags_subscriptions',
            field=models.ManyToManyField(blank=True, related_name='tags_subscriptions', to='tagging.Tag', verbose_name='Подписки на теги'),
        ),
        migrations.AddField(
            model_name='advuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='advuser',
            name='user_subscriptions',
            field=models.ManyToManyField(blank=True, related_name='_advuser_user_subscriptions_+', to=settings.AUTH_USER_MODEL, verbose_name='Подписки на пользователей'),
        ),
    ]
